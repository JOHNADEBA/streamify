// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  profileImage  String?
  role          Role           @default(USER) // Default role is 'USER'
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  watchHistory  WatchHistory[]
  favorites     Favorite[]
  subscriptions Subscription[]
}

model Video {
  id            String    @id @default(uuid())
  title         String
  description   String?
  thumbnail     String? // Cover image
  muxAssetId    String    @unique
  muxPlaybackId String    @unique // Mux or hosted URL
  duration      Float // Video length in seconds
  releaseDate   DateTime?
  aspectRatio   String?
  views         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt()

  WatchHistory WatchHistory[]
  Favorite     Favorite[]
  categories   Category[]     @relation(name: "VideoCategories")
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  videos Video[] @relation(name: "VideoCategories")
}

model WatchHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  watchedAt DateTime @default(now())
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  plan      plan
  status    status
  createdAt DateTime @default(now())
}

enum plan {
  Free
  Premium
  VIP
}

enum status {
  Active
  Canceled
}

enum Role {
  ADMIN
  USER
  PREMIUM
}
